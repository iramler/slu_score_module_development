---
title: "Score Module"
format: html
---

Make a database out of all of the data sets.

Make a three score modules: R, Python, SQL.

Could include extracting certain drivers or teams and compare.

Make side by side plots using facet wrap. 

Have them make/observe graphs and see what the relation is.


load packages
```{r}
library(readr)
library(dplyr)
#install.packages("DBI")
#install.packages("RSQLite")
library(DBI)
library(RSQLite)
library(ggplot2)
```


```{r}
races_data <- read_csv("~/OneDrive - St. Lawrence University/St. Lawrence/SLU SYE/Score Module/races.csv")

drivers_data <- read_csv("~/OneDrive - St. Lawrence University/St. Lawrence/SLU SYE/Score Module/drivers.csv")

seasons_data <- read_csv("~/OneDrive - St. Lawrence University/St. Lawrence/SLU SYE/Score Module/seasons.csv")

driver_standings_data <- read_csv("~/OneDrive - St. Lawrence University/St. Lawrence/SLU SYE/Score Module/driver_standings.csv")

constructors_data <- read_csv("~/OneDrive - St. Lawrence University/St. Lawrence/SLU SYE/Score Module/constructors.csv")

results_data <- read_csv("~/Library/CloudStorage/OneDrive-St.LawrenceUniversity/St. Lawrence/SLU SYE/Score Module/results.csv")

constructor_results_data <- read_csv("~/Library/CloudStorage/OneDrive-St.LawrenceUniversity/St. Lawrence/SLU SYE/Score Module/constructor_results.csv")

status_data <- read_csv("~/Library/CloudStorage/OneDrive-St.LawrenceUniversity/St. Lawrence/SLU SYE/Score Module/status.csv")

pit_stops_data <- read_csv("~/Library/CloudStorage/OneDrive-St.LawrenceUniversity/St. Lawrence/SLU SYE/Score Module/pit_stops.csv")

qualifying_data <- read_csv("~/Library/CloudStorage/OneDrive-St.LawrenceUniversity/St. Lawrence/SLU SYE/Score Module/qualifying.csv")
```

```{r}
## Cleaning data sets so it's only including the 2021 season

drivers_data <- filter(drivers_data, driverId %in% c("830","1","822","815","832","846","844","817","842","4","839","20","840","852","847","8","849","841","854","9","853"))

constructors_data <- filter(constructors_data, constructorId %in% c("131", "9","6","1","214","213","117","3","51","210"))

seasons_data <- filter(seasons_data, year == 2021)

races_data <- filter(races_data, year == 2021)


driver_standings_data <- filter(driver_standings_data, raceId %in% c(1053, 1052, 1051, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1069, 1070, 1071, 1072, 1073))

results_data <- filter(results_data, raceId %in% c(1053, 1052, 1051, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1069, 1070, 1071, 1072, 1073))

constructor_results_data <- filter(constructor_results_data,raceId %in% c(1053, 1052, 1051, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1069, 1070, 1071, 1072, 1073))

pit_stops_data <- filter(pit_stops_data,raceId %in% c(1053, 1052, 1051, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1069, 1070, 1071, 1072, 1073))


qualifying_data <- filter(qualifying_data,raceId %in% c(1053, 1052, 1051, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1069, 1070, 1071, 1072, 1073))


```



```{r}
#Create SQLite database
con <- dbConnect(RSQLite::SQLite(), "f1_database.db")
```

```{r}
dbWriteTable(con, "races", races_data, overwrite = TRUE)
dbWriteTable(con, "drivers", drivers_data, overwrite = TRUE)
dbWriteTable(con, "constructors", constructors_data, overwrite = TRUE)
dbWriteTable(con, "driver_standings", driver_standings_data, overwrite = TRUE)
dbWriteTable(con, "constructor_results", constructor_results_data, overwrite = TRUE)
dbWriteTable(con, "pit_stops", pit_stops_data, overwrite = TRUE)
dbWriteTable(con, "qualifying", qualifying_data, overwrite = TRUE)
```


```{r}
f1_df <- dbGetQuery(con, "
    SELECT 
        r.raceId, 
        r.driverId, 
        d.driverRef, 
        r.constructorId, 
        c.constructorRef, 
        r.grid, 
        r.position, 
        r.points, 
        r.fastestLapSpeed, 
        p.stop
    FROM results r
    LEFT JOIN drivers d ON r.driverId = d.driverId
    LEFT JOIN constructors c ON r.constructorId = c.constructorId
    LEFT JOIN pit_stops p ON r.raceId = p.raceId AND r.driverId = p.driverId;
")
# Remove duplicates from the dataframe
f1_df <- f1_df %>%
  distinct(raceId, driverId, constructorId, .keep_all = TRUE)
# Replace '\N' with NA
f1_df$position[f1_df$position == "\\N"] <- NA
f1_df$grid[f1_df$grid == "\\N"] <- NA

# Convert to numeric
f1_df$position <- as.numeric(f1_df$position)
f1_df$grid <- as.numeric(f1_df$grid)

f1_df$position[is.na(f1_df$position)] <- 0  # Replace missing race positions with 21 (last place)

f1_df
```

```{r}
# Plot grid vs position, colored by driver
ggplot(f1_df, aes(x = grid, y = position, color = driverRef)) +
  geom_point(alpha = 0.7) +  # Scatter plot with transparency for better visualization
  labs(title = "Grid vs Position Colored by Driver", 
       x = "Grid Position", 
       y = "Race Position") +
  theme_minimal() +
  scale_x_continuous(limits = c(1, 20)) +  # Restrict grid to typical F1 grid positions (1 to 20)
  scale_y_continuous(limits = c(0, 20))  # Restrict position to typical F1 race positions (0 to 20)

```



```{r}
library(ggplot2)
library(dplyr)

# Define selected drivers
selected_drivers <- c("max_verstappen", "hamilton")

# Create a new column to categorize drivers
f1_df <- f1_df |> 
  mutate(driver_highlight = ifelse(driverRef %in% selected_drivers, driverRef, "Other"))

# Plot grid vs position, highlighting Verstappen and Hamilton
ggplot(f1_df, aes(x = grid, y = position, color = driver_highlight)) +  
  geom_point(alpha = 0.7) +  # Scatter plot with transparency  
  labs(title = "Grid vs Position (Highlighting Verstappen & Hamilton)",  
       x = "Grid Position",  
       y = "Race Position",  
       color = "Driver") +  
  geom_jitter(alpha=.95)+
  theme_minimal() +  
  scale_x_continuous(limits = c(1, 20)) +  # Restrict grid to typical F1 positions (1 to 20)  
  scale_y_continuous(limits = c(0, 20)) +  # Restrict position to typical race positions (0 to 20)  
  scale_color_manual(values = c("max_verstappen" = "skyblue", "hamilton" = "red", "Other" = "gray"))  # Assign colors



```





```{r}
library(ggplot2)
library(dplyr)

# Filter the dataset to include only Mercedes and Red Bull drivers
f1_filtered_df <- f1_df %>% 
  filter(constructorRef %in% c("mercedes", "red_bull"))
3
# Plot grid vs position for Mercedes and Red Bull drivers
ggplot(f1_filtered_df, aes(x = grid, y = position, color = constructorRef)) + 
  geom_point(alpha = 0.7) +  # Scatter plot with transparency for better visualization
  labs(title = "Grid vs Position for Mercedes & Red Bull Drivers",
       x = "Grid Position",
       y = "Race Position") +
  geom_jitter(alpha=.95)+
  theme_minimal() +
  scale_x_continuous(limits = c(1, 20)) +  # Restrict grid to typical F1 grid positions (1 to 20)
  scale_y_continuous(limits = c(0, 20))    # Restrict position to typical F1 race positions (0 to 20)

```





```{r}
library(ggplot2)

# Filter data for Lewis Hamilton and Max Verstappen
selected_drivers <- c("hamilton", "max_verstappen")
df_filtered <- f1_df |>
  dplyr::filter(driverRef %in% selected_drivers) |>
  dplyr::arrange(driverRef, raceId) |>
  dplyr::group_by(driverRef) |>
  dplyr::mutate(cumulative_points = cumsum(points))

# Plot the cumulative points with thinner lines
ggplot(df_filtered, aes(x = raceId, y = cumulative_points, color = driverRef, group = driverRef)) +
  geom_line(size = 0.8) +  # Adjusted for thinner lines
  geom_point(size = 2) +
  labs(title = "Cumulative Points Throughout the Season",
       x = "Race",
       y = "Cumulative Points",
       color = "Driver") +
  theme_minimal()


```

```{r}
library(ggplot2)
library(dplyr)

# Filter data for Red Bull and Mercedes
selected_constructors <- c("red_bull", "mercedes")

df_filtered <- f1_df |>  
  dplyr::filter(constructorRef %in% selected_constructors) |>  
  dplyr::arrange(constructorRef, raceId) |>  
  dplyr::group_by(constructorRef, raceId) |>  
  dplyr::summarise(total_points = sum(points), .groups = "drop") |>  # Sum points for each constructor per race
  dplyr::group_by(constructorRef) |>  
  dplyr::mutate(cumulative_points = cumsum(total_points))  # Compute cumulative points

# Plot cumulative points for Red Bull and Mercedes
ggplot(df_filtered, aes(x = raceId, y = cumulative_points, color = constructorRef, group = constructorRef)) +  
  geom_line(size = 0.8) +  # Thinner lines  
  geom_point(size = 2) +  
  labs(title = "Cumulative Points Throughout the Season (Constructors)",  
       x = "Race",  
       y = "Cumulative Points",  
       color = "Constructor") +  
  theme_minimal()

```




```{r}
library(ggplot2)
library(dplyr)

# Filter data for Lewis Hamilton and Max Verstappen
selected_drivers <- c("hamilton", "max_verstappen")
f1_df_filtered <- f1_df |>
  filter(driverRef %in% selected_drivers)

# Plot the density distribution of points for Hamilton and Verstappen
ggplot(data = f1_df_filtered) + 
  geom_density(aes(x = points, color = driverRef, fill = driverRef), alpha = 0.25) + 
  theme_minimal() +
  labs(title = "Density Distribution of Points for Hamilton and Verstappen",
       x = "Points",
       y = "Density") 


```














```{r}
#rewrite to make sure results is getting read correctly.
dbWriteTable(con, "results", results_data, overwrite = TRUE, row.names = FALSE)
dbGetQuery(con, "SELECT * FROM results LIMIT 20")

```











```{r}
result <- dbGetQuery(con, "
    SELECT r.raceId, r.year, r.round, r.name, r.date, 
           d.driverId, d.surname, d.forename, 
           res.position, res.points, 
           c.constructorId, c.name AS constructor_name
    FROM races r
    JOIN results res ON r.raceId = res.raceId
    JOIN drivers d ON res.driverId = d.driverId
    JOIN constructors c ON res.constructorId = c.constructorId
    ORDER BY r.round ASC, res.position ASC
")
print(result)

```

```{r}
#for score module:
#1 Plot scoring for lewis hamilton compared to Max Verstappen throughout the season.
#2 Plot Position vs. Starting positon to see the relationship
#3 Plot Average Position vs. Average Starting Position for each team to see if some teams qualify well but don't perform well in the race. 
#4 What seems to be the optimal number of pitstops per race. Explore the relationship between number of pitstops and final position.
#5 Relationship between fastest lap speed on final position

```



```{r}
#how many races each driver has competed in
dbGetQuery(con, "SELECT driverId, COUNT(raceId) AS races_participated 
                 FROM results GROUP BY driverId ORDER BY races_participated DESC")

#get total points per constructor
dbGetQuery(con, "SELECT c.name, SUM(res.points) AS total_points 
                 FROM results res 
                 JOIN constructors c ON res.constructorId = c.constructorId 
                 GROUP BY c.name ORDER BY total_points DESC")

#show race results from a given race. 
dbGetQuery(con, "
    SELECT res.raceId, CAST(res.position AS INTEGER) AS position, d.surname, d.forename
    FROM results res
    JOIN drivers d ON res.driverId = d.driverId
    WHERE res.raceId = 1053
    ORDER BY position ASC")

#show final positon given different starting positions.
dbGetQuery(con, "
    SELECT res.raceId, q.position AS starting_position, res.position AS finishing_position, 
           d.surname, d.forename
    FROM results res
    JOIN qualifying q ON res.raceId = q.raceId AND res.driverId = q.driverId
    JOIN drivers d ON res.driverId = d.driverId
    
    ORDER BY starting_position ASC.
")
```


