---
title: "Score Module"
format: html
---

Make a database out of all of the data sets.

Make a three score modules: R, Python, SQL.

Could include extracting certain drivers or teams and compare.

Make side by side plots using facet wrap. 

Have them make/observe graphs and see what the relation is.

```{r}
library(readr)
library(dplyr)
install.packages("DBI")
install.packages("RSQLite")
library(DBI)
library(RSQLite)
```


```{r}
races_data <- read_csv("~/OneDrive - St. Lawrence University/St. Lawrence/SLU SYE/Score Module/races.csv")

drivers_data <- read_csv("~/OneDrive - St. Lawrence University/St. Lawrence/SLU SYE/Score Module/drivers.csv")

seasons_data <- read_csv("~/OneDrive - St. Lawrence University/St. Lawrence/SLU SYE/Score Module/seasons.csv")

driver_standings_data <- read_csv("~/OneDrive - St. Lawrence University/St. Lawrence/SLU SYE/Score Module/driver_standings.csv")

constructors_data <- read_csv("~/OneDrive - St. Lawrence University/St. Lawrence/SLU SYE/Score Module/constructors.csv")

results_data <- read_csv("~/Library/CloudStorage/OneDrive-St.LawrenceUniversity/St. Lawrence/SLU SYE/Score Module/results.csv")

constructor_results_data <- read_csv("~/Library/CloudStorage/OneDrive-St.LawrenceUniversity/St. Lawrence/SLU SYE/Score Module/constructor_results.csv")

status_data <- read_csv("~/Library/CloudStorage/OneDrive-St.LawrenceUniversity/St. Lawrence/SLU SYE/Score Module/status.csv")

pit_stops_data <- read_csv("~/Library/CloudStorage/OneDrive-St.LawrenceUniversity/St. Lawrence/SLU SYE/Score Module/pit_stops.csv")

qualifying_data <- read_csv("~/Library/CloudStorage/OneDrive-St.LawrenceUniversity/St. Lawrence/SLU SYE/Score Module/qualifying.csv")
```

```{r}
## Cleaning data sets so it's only including the 2021 season

drivers_data <- filter(drivers_data, driverId %in% c("830","1","822","815","832","846","844","817","842","4","839","20","840","852","847","8","849","841","854","9","853"))

constructors_data <- filter(constructors_data, constructorId %in% c("131", "9","6","1","214","213","117","3","51","210"))

seasons_data <- filter(seasons_data, year == 2021)

races_data <- filter(races_data, year == 2021)


driver_standings_data <- filter(driver_standings_data, raceId %in% c(1053, 1052, 1051, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1069, 1070, 1071, 1072, 1073))

results_data <- filter(results_data, raceId %in% c(1053, 1052, 1051, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1069, 1070, 1071, 1072, 1073))

constructor_results_data <- filter(constructor_results_data,raceId %in% c(1053, 1052, 1051, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1069, 1070, 1071, 1072, 1073))

pit_stops_data <- filter(pit_stops_data,raceId %in% c(1053, 1052, 1051, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1069, 1070, 1071, 1072, 1073))


qualifying_data <- filter(qualifying_data,raceId %in% c(1053, 1052, 1051, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1069, 1070, 1071, 1072, 1073))


```



```{r}
#Create SQLite database
con <- dbConnect(RSQLite::SQLite(), "f1_database.db")
```

```{r}
dbWriteTable(con, "races", races_data, overwrite = TRUE)
dbWriteTable(con, "drivers", drivers_data, overwrite = TRUE)
dbWriteTable(con, "constructors", constructors_data, overwrite = TRUE)
dbWriteTable(con, "driver_standings", driver_standings_data, overwrite = TRUE)
dbWriteTable(con, "constructor_results", constructor_results_data, overwrite = TRUE)
dbWriteTable(con, "pit_stops", pit_stops_data, overwrite = TRUE)
dbWriteTable(con, "qualifying", qualifying_data, overwrite = TRUE)
```

```{r}
result <- dbGetQuery(con, "SELECT * FROM races ORDER BY round ASC")
print(result)
```

```{r}
#rewrite to make sure results is getting read correctly.
dbWriteTable(con, "results", results_data, overwrite = TRUE, row.names = FALSE)
dbGetQuery(con, "SELECT * FROM results LIMIT 5")

```


```{r}
result <- dbGetQuery(con, "
    SELECT r.raceId, r.year, r.round, r.name, r.date, 
           d.driverId, d.surname, d.forename, 
           res.position, res.points, 
           c.constructorId, c.name AS constructor_name
    FROM races r
    JOIN results res ON r.raceId = res.raceId
    JOIN drivers d ON res.driverId = d.driverId
    JOIN constructors c ON res.constructorId = c.constructorId
    ORDER BY r.round ASC, res.position ASC
")
print(result)

```
```{r}
#how many races each driver has competed in
dbGetQuery(con, "SELECT driverId, COUNT(raceId) AS races_participated 
                 FROM results GROUP BY driverId ORDER BY races_participated DESC")

#get total points per constructor
dbGetQuery(con, "SELECT c.name, SUM(res.points) AS total_points 
                 FROM results res 
                 JOIN constructors c ON res.constructorId = c.constructorId 
                 GROUP BY c.name ORDER BY total_points DESC")

#show race results from a given race. 
dbGetQuery(con, "
    SELECT res.raceId, CAST(res.position AS INTEGER) AS position, d.surname, d.forename
    FROM results res
    JOIN drivers d ON res.driverId = d.driverId
    WHERE res.raceId = 1053
    ORDER BY position ASC")

#show final positon given different starting positions.
dbGetQuery(con, "
    SELECT res.raceId, q.position AS starting_position, res.position AS finishing_position, 
           d.surname, d.forename
    FROM results res
    JOIN qualifying q ON res.raceId = q.raceId AND res.driverId = q.driverId
    JOIN drivers d ON res.driverId = d.driverId
    
    ORDER BY starting_position ASC.
")
```


