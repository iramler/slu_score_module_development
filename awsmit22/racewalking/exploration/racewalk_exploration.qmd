---
title: "race_walk_exploration"
format: html
---
# Libraries and Data

```{r}
library(tidyverse)
library(readr)
library(broom)
```

```{r}
worldchamps <- read_csv("~/Desktop/git/stat_289_score/awsmit22/racewalking/module/worldchamps.csv")
```

```{r}
racewalking_df <- read_csv("~/Desktop/git/stat_289_score/awsmit22/racewalking/data_repo_submission/racewalking.csv")
```

# Data Prep

```{r}
ten <- worldchamps |> filter(DISTANCE == 10000) |> separate(TIME, into = c("TIME", "RECORD"), sep = " ") |> separate(TIME, into = c("MIN", "SEC"), sep = ":") |> mutate(MIN = as.double(MIN), SEC = as.double(SEC)) |> mutate(SEC = SEC/60) |> mutate(TIME = SEC + MIN) |> mutate(RECORD = replace_na(RECORD, replace = "NONE")) 
```

```{r}
twenty <- worldchamps |> filter(DISTANCE == 20000) |> separate(TIME, into = c("TIME", "RECORD"), sep = " ") |> separate(TIME, into = c("HRS", "MIN", "SEC"), sep = ":") |> mutate(HRS = as.double(HRS), MIN = as.double(MIN), SEC = as.double(SEC)) |> mutate(HRS = HRS*60, SEC = SEC/60) |> mutate(TIME = HRS + SEC + MIN) |> mutate(RECORD = replace_na(RECORD, replace = "NONE")) 
```

```{r}
complete <- full_join(ten, twenty)
```

```{r}
racewalking <- complete |> select(POS, COUNTRY, ATHLETE, RECORD, DISTANCE, GENDER, TIME)
```

```{r}
racewalking_df <- racewalking |> mutate(SPEED= DISTANCE/TIME) 
```

```{r}
racewalking_df <- racewalking_df |> mutate(GENDER = if_else(GENDER == 1, true = "Woman", false = "Man"))
```

```{r}
racewalking_df <- racewalking_df |> mutate(DISTANCE = as.factor(DISTANCE))
```

Times in minutes
Distance is in meters
Gender 0 is Men
Gender 1 is women
Speed is in m/min for now but could be adjusted to m/sec if i decide thats better

# Exploration

# might use 
```{r}
ggplot(racewalking_df, aes(y = SPEED, x = DISTANCE)) + geom_boxplot()
```
#might use
```{r}
ggplot(racewalking_df, aes(y = SPEED, x = DISTANCE)) + geom_boxplot() + facet_wrap(~GENDER)
```

```{r}
ggplot(racewalking_df, aes(y = SPEED, x = GENDER)) + geom_boxplot() + facet_wrap(~DISTANCE)
```

# Definitely going to use
```{r}
ggplot(racewalking_df, aes(x = SPEED)) + geom_histogram(bins = 15, colour = "black", fill = "lightblue") + facet_wrap(~DISTANCE)
```

#might use
```{r}
barplot <- racewalking_df |> group_by(RECORD) |> summarise(count = n())

ggplot(barplot, aes(x = RECORD, y = count)) + geom_col() + geom_text(aes(label = count), nudge_y = 3)
```


# probably not going to use
```{r}
n_records <- racewalking_df |> mutate(n_record = if_else(RECORD == "NONE", true = 0, false = 1))

records <- n_records |>group_by(COUNTRY) |> summarise(n_record = sum(n_record)) |> filter(n_record >=2) |>mutate(COUNTRY = fct_reorder(COUNTRY, n_record))

ggplot(data = records, aes(x = COUNTRY, y = n_record)) + geom_col() + coord_flip() 
```

# migth use
```{r}
ggplot(racewalking_df, aes(x = SPEED, colour = as.factor(DISTANCE))) + geom_freqpoly() 
```

# Difference in means (speeds)

speed predicted by distance
# might use
```{r}
race_walk <-racewalking |> mutate(DISTANCE = as.factor(DISTANCE)) |> mutate(SPEED = if_else(DISTANCE == 10000, true = 10000/TIME, false = 20000/TIME))

mod <- lm(SPEED~DISTANCE, data = race_walk)
summary(mod)
```

# summarised df 
* might use
```{r}
sum <- racewalking_df |> mutate(n_rec = if_else(RECORD != "NONE", true = 1, false = 0)) |> filter(n_rec == 1) |> group_by(COUNTRY) |> summarise(tot_rec = sum(n_rec), avg_speed = mean(SPEED))
```


# Logistic regression for whether or not the athlete gets a record
# Might use
could do it predicted by speed as well as distance

that would mean a binary response predicted by a binary predictor and a quantitative predictor

```{r}
recs <- racewalking_df |> mutate(rec = if_else(RECORD != "NONE", true = 1, false = 0))
```

```{r}
rec_mod <- glm(rec ~ SPEED,
                   data = recs, family = "binomial")
rec_mod
```

```{r}
rec_mod |> tidy()
```

# might use
```{r}
ggplot(data = recs, aes(x = SPEED, y = rec)) +
  geom_jitter(height = 0.05) +
  geom_smooth(method = "glm", method.args = list(family = "binomial")) +
  theme_minimal()
```

# might use
```{r}
rec_large <- glm(rec ~ SPEED + GENDER + DISTANCE, data = recs,
                     family = "binomial")
rec_large |> tidy()
```

# want to use but i dont think i can
```{r}
library(modelr)
grid <- recs |>
  data_grid(
    SPEED = seq_range(SPEED, n = 10),
    GENDER = c("Man", "Woman"),
    DISTANCE = c("10000", "20000")
  ) 
grid
```

```{r}
aug_rec <- augment(rec_large, newdata = grid,
                    se_fit = TRUE)
aug_rec
```

```{r}
aug_pred <- aug_rec |> mutate(.predprob = exp(.fitted)/(1 + exp(.fitted)))
```

```{r}
rec_large_int <- glm(rec ~ SPEED + GENDER + DISTANCE + GENDER:DISTANCE, data = recs,
                     family = "binomial")
rec_large_int |> tidy()
```

```{r}
aug_rec_int <- augment(rec_large_int, newdata = grid,
                    se_fit = TRUE)
aug_rec_int

aug_pred_int <- aug_rec_int |> mutate(.predprob = exp(.fitted)/(1 + exp(.fitted)))
```

```{r}
rug_rec <- recs |> filter(rec == 1)
rug_norec <- recs |> filter(rec == 0)
ggplot(data = recs, aes(x = SPEED, y = rec)) +
  geom_rug(data = rug_rec, sides = "t", alpha = 0.3) + geom_rug(data = rug_norec, sides = "b", alpha = 0.3) +
  geom_smooth(method = "glm", method.args = list(family = "binomial")) +
  theme_minimal()
```

```{r}
plot <- bind_rows(lst(aug_pred, aug_pred_int), .id = "model")

ggplot(data = plot, aes(x = SPEED, y = .predprob)) + geom_line(aes(colour = model), linewidth = 2) + facet_grid(GENDER ~ DISTANCE) + geom_rug(data = rug_rec, sides = "t", alpha = 0.3, aes(y = rec)) + geom_rug(data = rug_norec, sides = "b", alpha = 0.3, aes(y = rec)) + theme_minimal() + scale_color_viridis_d()
```

# Difference in props (records)

# probably going to use
```{r}
prop_records <- n_records |>group_by(COUNTRY) |> summarise(n= n(), n_record = sum(n_record), prop = n_record/n) |> filter(n_record >=2) |>mutate(COUNTRY = fct_reorder(COUNTRY, n_record)) |> filter(prop < 1) |> mutate(COUNTRY = fct_reorder(COUNTRY, prop))

ggplot(data = prop_records, aes(x = COUNTRY, y = prop)) + geom_col() + coord_flip() 
```
# might use
```{r}
prop <- racewalking_df |> group_by(RECORD) |> summarise(prop = n()/237) 

prop_round <- round(prop$prop, digits = 3)

ggplot(prop, aes(x = RECORD, y = prop)) + geom_col() + geom_text(aes(label = prop_round), nudge_y = 0.01)
```
# Don't think I'll use
```{r}
prop_records_dist <- n_records |>group_by(DISTANCE) |> summarise(n= n(), n_record = sum(n_record), prop = n_record/n) 

ggplot(data = prop_records_dist, aes(x = DISTANCE, y = prop)) + geom_col()
```
# might use
```{r}
prop_records_dist <- podium |>group_by(COUNTRY, DISTANCE) |> summarise(n= n(), n_record = sum(REC), prop = n_record/n) |> filter(prop <1 & prop > 0)

ggplot(data = prop_records_dist, aes(x = DISTANCE, y = prop)) + geom_boxplot()
```

# need to finish
```{r}
success <- recs |> filter(rec == 1)
success <- (success$rec)
prop.test()
```


# Linear regression with POS predicted by COUNTRY, ATHLETE AND RECORD and maybe speed
# might use
```{r}
ggplot(data = racewalking_df, aes(x = as.factor(PODIUM), y = SPEED)) + geom_boxplot()
```

```{r}
fcts <- racewalking_df |> mutate(COUNTRY = as.factor(COUNTRY), ATHLETE = as.factor(ATHLETE))
pos_mod <- lm(POS ~ COUNTRY + ATHLETE + REC + SPEED, data = fcts)

pos_mod |> tidy()
```

# Linear regression with RECORD predicted by SPEED, POS, COUNTRY, GENDER, DISTANCE

```{r}
modr <- glm(REC ~ DISTANCE + SPEED + POS + COUNTRY + GENDER, data = racewalking_df, family = "binomial")
summary(modr)
modr |> tidy()
```


# Randomized block design

```{r}
race_factors <- racewalking_df |> mutate(ATHLETE = as.factor(ATHLETE))
mod1 <- lm(SPEED ~ DISTANCE, data = race_factors)
summary(mod1)
amodA <- aov(SPEED~DISTANCE,data=race_factors)
summary(amodA)

mod2 <- lm(SPEED ~ ATHLETE, data = race_factors)
summary(mod2)
amodB <- aov(SPEED~ATHLETE,data=race_factors)
summary(amodB)

mod3 <- lm(SPEED ~ DISTANCE + ATHLETE, data = race_factors)
summary(mod3)
amodC <- aov(SPEED~DISTANCE+ATHLETE,data=race_factors)
summary(amodC)
```

# might use
```{r}
summed <- racewalking_df |> group_by(COUNTRY, DISTANCE) |> summarise(mean_speed = mean(SPEED))

amodA <- aov(mean_speed~DISTANCE,data=summed)
summary(amodA)

amodB <- aov(mean_speed~COUNTRY,data=summed)
summary(amodB)

amodC <- aov(mean_speed~DISTANCE+COUNTRY,data=summed)
summary(amodC)
```

* could do this one partially filled in *

# Log reg with binary predictor
# might use
```{r}
rec_dist <- glm(REC ~ DISTANCE, family = "binomial", data = racewalking_df)
summary(rec_dist)
```


# T test for difference in mean speed for the two distances 
# might use
```{r}
t.test(SPEED~DISTANCE, var.equal=TRUE, data=racewalking_df)
```

# Attempt to compare two regression lines for the distances

```{r}
men <- subset(racewalking_df,GENDER=="Man")
women <- subset(racewalking_df,GENDER=="Woman")
modl <- lm(SPEED~TIME,data=men)
mods <- lm(SPEED~TIME,data=women)

plot(SPEED~TIME, data = racewalking_df)

abline(men)
abline(women)
```

```{r}
mod =aov(POS~COUNTRY,data=racewalking_df)
summary(mod)
```

```{r}
range(racewalking_df$SPEED)
```

# simple logit mod 
# might use
```{r}
logit <- racewalking_df |> mutate(REC = as.factor(REC))
logitmod <- glm(REC~SPEED,family=binomial,data=logit)
summary(logitmod)
```

# predicted prop, odds, OR
# MIGHT USE
```{r}
logitmod=glm(REC~SPEED,family=binomial,data=racewalking_df)
summary(logitmod)
```

```{r}
SPEED = 245
predicted_prop <- (exp(-0.473731+0.003976*SPEED))/(1 +exp(-0.473731+0.003976*SPEED))
```

```{r}
sample_prop <- sum(rec)/237
```

```{r}
odds <- exp(-0.473731 + 0.003976)
```

```{r}
odds_ratio <- exp(0.003976)
```

# rough try at 2-way anova 
# might use
```{r}
two_way=aov(SPEED~PODIUM+REC+PODIUM*REC,data=racewalking_df)
summary(two_way)
```

```{r}
with(win_rec,interaction.plot(REC,PODIUM,SPEED))
```

```{r}
with(win_rec,interaction.plot(PODIUM,REC,SPEED))
```


* Maybe do a 2 sided design with gender and distance * 

```{r}
amodA <- aov(SPEED~DISTANCE,data=racewalking_df)
summary(amodA)

amodB <- aov(SPEED~GENDER,data=racewalking_df)
summary(amodB)

amodC <- aov(SPEED~DISTANCE+GENDER,data=racewalking_df)
summary(amodC)
```

# g.test?

```{r}
factors <- racewalking_df |> mutate(REC = as.factor(REC), PODIUM = as.factor(PODIUM), DISTANCE = as.factor(DISTANCE))
```

```{r}
record_mod <- glm(REC ~ DISTANCE + PODIUM + SPEED + GENDER, family = "binomial", data = factors)
record_mod |> tidy()
record_mod |> summary()
```

```{r}
g_stat = 319.17 - 291.97
g_stat
```

```{r}
1-pchisq(g_stat,4)
```



