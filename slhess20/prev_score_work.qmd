---
title: "Bootstrap work"
format: html
editor: visual
---

```{r}
library(readr)

library(tidyverse)

library(dplyr)

library(magrittr)

timeout <- read.csv("slhess20/data/timeout.csv")
```

```{r}
#filter data to only be slu timeouts in 2014 only
timeout1 <- timeout %>% 
  filter(play_descripton == "Timeout St. Lawrence.") 
timeout1 <- timeout1[grepl("^2014", timeout1$Date), ]

timeout1 <- timeout1 %>% 
  select(prev_home_score, prev_visiting_score, losing_team, set_winner, losing_team_wins)
```

```{r}
library(boot)

statistic_function <- function(data, indices) {
  sample_data <- data[indices, ]
  mean_score <- mean(sample_data$prev_home_score)
  return(mean_score)
}

# num reps
num_bootstrap_replicates <- 1000

# resample
bootstrap_results <- boot(data = timeout1, statistic = statistic_function, R = num_bootstrap_replicates)

# Calculate the confidence interval using the percentile method
conf_interval_percentile <- boot.ci(bootstrap_results, type = "perc")$percent

print(conf_interval_percentile)

```

```{r}

win_likelihood <- function(data, indices) {
  sample_data <- data[indices, ]
  model <- glm(losing_team_wins ~ prev_home_score + prev_visiting_score, data = sample_data, family = "binomial")
  probabilities <- predict(model, type = "response")
  return(mean(probabilities))
}

# resample
bootstrap_results <- boot(data = timeout1, statistic = win_likelihood, R = num_bootstrap_replicates)

# CI
conf_interval_percentile <- boot.ci(bootstrap_results, type = "perc")$percent
print(conf_interval_percentile)

```

