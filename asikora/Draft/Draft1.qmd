---
title: "Shiny Score Module"
format: html
---
## Building a Shiny App

# Welcome Video?

For this activity, you will be exploring Caitlin Clark and Paige Beuckers data from their NCAA careers over the years of 2021 to 2025 by building a simple introductory Shiny App. 

In particular, you will examine statistics such as but not limited to, total season points, free throws made, and 3 pointers made using visualizations and summary statistics. You will also be asked to tidy data and fill it into a given Shiny App structure to compare and contrast the two players overall. 

Activity length: This activity would be suitable for an introductory in-class example for Shiny.

Learning Objectives: 
By the end of the activity, you will be able to:

- Tidy data using tidyr (review?)
- Identify strategies to implement when choosing correct visualizations
- Compare and contrast summary statistics for two different players

## Investigating the data

The Caitlin Clark data set contains 4 rows and 26 columns. Each row represents a single season for the player. 

Variables of interest: season, PTS, FGM, FTM, FGA

season: freshman - senior year (2020-2024)

PTS: total points scored in one season (each point has a value: 1-3, this column is total)

FGM: Total field goals made in one season (count of each bucket MADE, not individual points or total buckets attempted)

FTM: Total free throws made in one season

FGA: Total field goals attempted (FGM/FGA would give season percentage of shots made)

Load Packages

```{r}
library(shiny)
library(tidyverse)
library(readr)
library(here)
library(rvest)
```

Load Data
```{r}
url4 <- "https://herhoopstats.com/stats/ncaa/player/caitlin-clark-stats-11eb2f34-a838-c400-aa81-12df17ae4e1e/"

h4 <- read_html(url4)

tab4 <- h4 |> html_nodes("table")

clark_df <- tab4[[2]] |> html_table(fill = TRUE)

# Clean Data
clark_df$PTS <- gsub(",", "", clark_df$PTS) # Remove commas
clark_df$PTS <- as.integer(clark_df$PTS)    # Convert to integer

# Fix column names
colnames(clark_df) <- make.names(colnames(clark_df))

clark_df
```

Step 1: Tidy the data

- Change "Season" variable to say "First Year" for 2020-2021 season, and so on
  - Reorder variables so they are in order from First-Year to Senior
- Eliminate variables that are irrelevant
  - ex) won't need "Team" variable in this exploration
  - Only want: season, PTS, FGM, FTM, FGA
- Name the new tidy'd data set "clark_df1"

## KEY (what they will have to complete)

How much should I give them to start, should they do this completely on their own?

```{r}
#Change season column to class year

clark_df1 <- clark_df |>
  mutate(season = case_when(
    season == "2020-21" ~ "First-year",
    season == "2021-22" ~ "Sophomore",
    season == "2022-23" ~ "Junior",
    season == "2023-24" ~ "Senior",
    TRUE ~ season
  )) |> 
  # factor the seasons in order for readability
  mutate(season = factor(season, levels = c("First-year", "Sophomore", "Junior", "Senior"))) |>
  # THEN Select only the desired columns
  select(season, PTS, FGM, FTM, FGA)
```

A Shiny app consists of two main parts:

UI: 
This part defines how the app looks and what users interact with (buttons, dropdowns, checkboxes, etc.).
In your app, the UI allows users to choose statistics and seasons.

Server: 
This part defines what happens when users interact with the UI.
For example, when a user selects a statistic and seasons, the server updates the plot to show the requested data.

This app is simple. It takes user input (selected statistic and seasons) and displays a bar plot of Caitlin Clarkâ€™s game stats. The app reacts to changes in input and automatically updates the plot when the user selects different options.

```{r}
# UI ----
ui <- fluidPage(
  titlePanel("Caitlin Clark Game Stats"),
  sidebarLayout(
    sidebarPanel(
      selectInput("stat", "Choose Statistic:", 
                  choices = c("Points" = "PTS", 
                              "Field Goals Made" = "FGM",
                              "Free Throws Made" = "FTM",
                              "Field Goals Attempted" = "FGA")),
      checkboxGroupInput("seasons", "Select Seasons:", 
                         choices = c("First-year", "Sophomore", "Junior", "Senior"),
                         selected = c("First-year", "Sophomore", "Junior", "Senior"))
    ),
    mainPanel(
      plotOutput("statPlot")
    )
  )
) 

# Server -- -
server <- function(input, output) {
  output$statPlot <- renderPlot({
    data <- #clark_df1 |>     Where student will fill in data
      filter(season %in% input$seasons)  # Filter by selected seasons
    
    ggplot(data, aes(x = season, y = .data[[input$stat]])) +
      geom_col(fill = "lightblue", color = "black") +
      labs(
        title = paste(input$stat, "Across Selected Seasons"),
        x = "Season",
        y = input$stat
      ) +
      theme_minimal()
  })
}
# Run the App ----
shinyApp(ui = ui, server = server)
```

Introduce Paige data set

```{r}
# Load necessary libraries
library(rvest)
library(dplyr)

# Define the URL
url <- "https://www.espn.com/womens-college-basketball/player/_/id/4433730/paige-bueckers"

# Read the webpage content
webpage <- read_html(url)

# Extract tables as a list
tables <- webpage %>% html_nodes("table") %>% html_table(fill = TRUE)

# Extract the season column from Table 2
season_table <- tables[[2]] %>% select(1)  # Selecting only the first column (Season)

# Extract the stats columns from Table 3
stats_table <- tables[[3]]  # Assuming this contains all the numeric stats

# Rename the season column for clarity
colnames(season_table) <- "Season"

# Merge the two tables by row index
beuckers_df <- cbind(season_table, stats_table)

# Print the final merged table
print(beuckers_df)
```

The Paige Beuckers data set contains 4 rows and 13 columns. Each row in this data set also represents a single season for the player.

This data however, is in season averages and not total. 

- Have student work backwards to figure out season totals from average?
- Then tidy similar to clark_df
- explore more variables this time


```{r}
library(dplyr)

# Tidying the buckers_df dataset
beuckers_df1 <- beuckers_df |>
  # Change Season column to Class Year
  mutate(Season = case_when(
    Season == "2020-21" ~ "First-year",
    Season == "2021-22" ~ "Sophomore",
    Season == "2023-24" ~ "Junior",
    Season == "2024-25" ~ "Senior",
    TRUE ~ Season  # Keep other seasons unchanged, if there are any
  )) |>
  # Factor the Seasons for ordering
  mutate(Season = factor(Season, levels = c("First-year", "Sophomore", "Junior", "Senior"))) |>
  # Select only the desired columns
  select(Season, PTS, REB, AST, STL, BLK, `FG%`, `3P%`, `FT%`)

# View the tidied dataset
print(beuckers_df1)

```

Shiny App with both players

```{r}
# Load required libraries
library(shiny)
library(ggplot2)
library(dplyr)

# Assuming `clark_df1` and `beuckers_df1` are already available

# Renaming 'season' in clark_df1 to match 'Season' in beuckers_df1


# UI ----
ui <- fluidPage(
  titlePanel("Caitlin Clark vs Beuckers Game Stats"),
  
  sidebarLayout(
    sidebarPanel(
      selectInput("player", "Choose Player:", 
                  choices = c("Caitlin Clark" = "clark", 
                              "Beuckers" = "beuckers")),
      selectInput("stat", "Choose Statistic:", 
                  choices = c("Points" = "PTS", 
                              "Field Goals Made %" = "FG%",
                              "Three-Point %" = "3P%",
                              "Free Throw %" = "FT%",
                              "Rebounds" = "REB",
                              "Assists" = "AST",
                              "Steals" = "STL",
                              "Blocks" = "BLK",
                              "Turnovers" = "TO",
                              "Personal Fouls" = "PF")),
      checkboxGroupInput("seasons", "Select Seasons:", 
                         choices = c("First-year", "Sophomore", "Junior", "Senior"),
                         selected = c("First-year", "Sophomore", "Junior", "Senior"))
    ),
    
    mainPanel(
      plotOutput("statPlot"),
      plotOutput("otherStatPlot")  # New plot to show other stats
    )
  )
)

# Server ----
server <- function(input, output) {
  
  # Function to get data for the selected player
  get_player_data <- function(player) {
    if (player == "clark") {
      return(clark_df1)
    } else if (player == "beuckers") {
      return(beuckers_df1)
    }
  }
  
  # Render the main plot for the selected statistic
  output$statPlot <- renderPlot({
    player_data <- get_player_data(input$player)
    
    # Filter data by selected seasons
    data <- player_data %>%
      filter(Season %in% input$seasons) %>%
      mutate(Season = factor(Season, levels = c("First-year", "Sophomore", "Junior", "Senior")))  # Ordering seasons
    
    # Create the plot for the selected stat
    ggplot(data, aes(x = Season, y = .data[[input$stat]])) +
      geom_col(fill = "lightblue", color = "black") +
      labs(
        title = paste(input$stat, "Across Selected Seasons for", input$player),
        x = "Season",
        y = input$stat
      ) +
      theme_minimal()
  })
  
  # Render a separate plot for stats that don't match between Clark and Beuckers
  output$otherStatPlot <- renderPlot({
    player_data <- get_player_data(input$player)
    
    # Create a vector of columns that exist only in this dataset
    other_columns <- setdiff(names(player_data), c("Season", "PTS", "REB", "AST", "STL", "BLK", "TO", "FG_pct", "3P_pct", "FT_pct", "PF"))
    
    if (length(other_columns) > 0) {
      # Assuming we're just displaying the first such column for comparison
      data <- player_data %>%
        filter(Season %in% input$seasons) %>%
        mutate(Season = factor(Season, levels = c("First-year", "Sophomore", "Junior", "Senior")))  # Ordering seasons
      
      ggplot(data, aes(x = Season, y = .data[[other_columns[1]]])) +
        geom_col(fill = "lightgreen", color = "black") +
        labs(
          title = paste(other_columns[1], "Across Selected Seasons for", input$player),
          x = "Season",
          y = other_columns[1]
        ) +
        theme_minimal()
    } else {
      # If there are no extra columns for this player, just show an empty plot
      ggplot() + theme_void() + labs(title = "No additional stats available")
    }
  })
}

# Run the App ----
shinyApp(ui = ui, server = server)

```

App is not concise or really effective AT ALL

Have student:

- remove variables that both data sets don't have
- Change title to "Caitlin Clark and Paige Beuckers Shiny App"
- Change operators:
  - Is there a better visualization to go along with given operators? Is the bottom visualization necessary?
- Choose which variables that are valuable to explore
- Have the student write 3-5 sentences describing how their app works using terms such as UI and Server

Possible questions for them to answer:

- How can these Shiny apps help us better understand the statistics for these players visually?

- What are some other visualizations that could be used to represent some of these statistics?

- Question about the different data set

- Does bringing in more variables make for a better Shiny app?
  - Yes and no, better for more investigation but can be bad for aesthetics and appearance of App













