---
title: "PWHL_Cleaning"
author: "Brendan Karadenes"
format: html
---

## Steps 1 & 2 Finding and Cleaning the Data

```{r}
## Import Packages
library(tidyverse)
library(here)
## Load and join data
hockey1 <- read.csv(here("bkaradenes/PWHL_Module/data/HockeyStats-1.csv"))
hockey2 <- read.csv(here("bkaradenes/PWHL_Module/data/HockeyStats-2.csv"))
hockey3 <- read.csv(here("bkaradenes/PWHL_Module/data/HockeyStats-3.csv"))
data1 <- full_join(hockey1, hockey2)
PWHL_data <- full_join(data1, hockey3)
## Write full dataset as a csv
write.csv(PWHL_data, "PWHL_Scoring.csv", row.names = FALSE)
PWHL_Scoring <- read.csv("PWHL_Scoring.csv")
```

```{r}
## Remove top row
names(PWHL_Scoring) <- NULL

# Set the current first row as new variable names
names(PWHL_Scoring) <- as.character(unlist(PWHL_Scoring[1, ]))

# Remove the first row, now that it's been set as variable names
PWHL_Scoring <- PWHL_Scoring[-1, ]
```

```{r}
## Removing NA columns
PWHL_Scoring <- PWHL_Scoring[ , colSums(is.na(PWHL_Scoring))==0]
```

## Step 3 Data Exploration

# 213/234 Example Ideas

1. Load in the necessary packages
2. Load in the datasets
3. Reconstruct Plots
4. Clean Data


1. Use the dplyr package to change the variable name "P" to "Points".

```{r}
PWHL_Scoring <-
  PWHL_Scoring %>%
    rename(Points = P)
```

2. Filter for rows with players over the age of 25.

```{r}
PWHL_Scoring %>%
  filter(Age > 25)
```

3. Filter the rows for players that are either Forwards (F) or Defense (D).

```{r}
PWHL_Scoring %>%
  filter(Pos %in% c("F", "D"))
```

4. Which position Forward or Defense averages the most points per player?

```{r}
PWHL_Scoring %>%
```


```{r}
ggplot(data = PWHL_Scoring, mapping = aes(x = Pos, y = P))
```

4. Prepping Dataset for Repository

```{r}
## Switching columns from character to numeric
PWHL_Scoring<- PWHL_Scoring %>%
  mutate(Rk = as.numeric(Rk),
         Age = as.numeric(Age),
         GP = as.numeric(GP),
         G = as.numeric(G),
         A = as.numeric(A),
         Points = as.numeric(Points),
         PIM = as.numeric(PIM),
        `+/-` = as.numeric(`+/-`),
        PPG = as.numeric(PPG),
        SHG = as.numeric(SHG),
        GWG = as.numeric(GWG),
        `G/GP` = as.numeric(`G/GP`),
        `A/GP` = as.numeric(`A/GP`),
        `P/GP` = as.numeric(`P/GP`))
```




