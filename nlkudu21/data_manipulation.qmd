---
title: "2023 Miami GP Dataset"
format: html
---

```{r}
library(tidyverse)
library(here)
```

```{r}
here()
results <- read.csv(here("nlkudu21/data/results.csv"))
races <- read.csv(here("nlkudu21/data/races.csv"))
lap_times <- read.csv(here("nlkudu21/data/lap_times.csv"))
drivers <- read.csv(here("nlkudu21/data/drivers.csv"))
constructors <- read_csv(here("nlkudu21/data/constructors.csv"))
```

```{r}
races |> filter(name == "Miami Grand Prix") |> filter(year == 2023)
```

```{r}
# filter only lap times from 2023 Miami GP
miami2023_lap_times <- lap_times |> filter(raceId == 1102)
```

```{r}
results |> filter(raceId == 1102) 
```
```{r}
drivers |> filter(driverId == 858)
```

```{r}
# include name with driverId
miami2023_lap_times <- miami2023_lap_times |> 
  left_join(drivers, by = c("driverId" = "driverId")) |>
  select(raceId, driverId, forename, surname, lap, position, time)
miami2023_lap_times
```

```{r}
# get wanted data
miami2023_data <- miami2023_lap_times |> 
  left_join(results, by = c("raceId" = "raceId", "driverId" = "driverId")) |> 
  left_join(constructors, by = c("constructorId" = "constructorId")) |>
  select(driverId, forename, surname, constructorId, name, lap, time.x, position.x, fastestLap, fastestLapTime) |>
  rename(lapTime = time.x, 
         lapPosition = position.x,
         constructorName = name)

# convert <chr> times to <num>
miami2023_data <- miami2023_data |>
  separate(lapTime, into = c("t_minutes", "t_seconds", "t_milliseconds"), sep = "[:.]", convert = TRUE) |>
  mutate(lapTime = t_minutes * 60 + t_seconds + t_milliseconds / 1000) |>
  separate(fastestLapTime, into = c("f_minutes", "f_seconds", "f_milliseconds"), sep = "[:.]", convert = TRUE) |>
  mutate(fastestLapTime = f_minutes * 60 + f_seconds + f_milliseconds / 1000) |>
  select(-t_minutes, -t_seconds, -t_milliseconds, -f_minutes, -f_seconds, -f_milliseconds)

miami2023_data

# more data cleanup
miami2023_data <- miami2023_data |>
  unite(driverName, c(forename, surname), sep = " ") |>
  mutate(fastestLap = as.integer(fastestLap)) |>
  select(driverId, driverName, constructorId, constructorName, lap, lapTime, lapPosition)

str(miami2023_data)
dim(miami2023_data)
```

```{r}
here()
write.csv(miami2023_data, here("nlkudu21/data/miami2023_data.csv"), row.names = FALSE)
write.csv(miami2023_data, ("./data/miami2023_data.csv"), row.names = FALSE)
```

```{r}
# summary statistics for driver "Lando Norris" 
miami2023_data |> filter(driverName == "Lando Norris") |> summary()
```

```{r}
# find the fastest lap for each driver
miami2023_data |> 
  group_by(driverName) |> 
  summarise(fastestLap = min(lapTime)) |> 
  arrange(fastestLap)
```

```{r}
# make a histogram of laptimes by lando norris
miami2023_data |> 
  filter(driverName == "Lando Norris") |> 
  ggplot(aes(x = lapTime)) + 
  geom_histogram(binwidth = 1, fill = "blue", color = "black") + 
  labs(title = "Lando Norris Lap Times", x = "Lap Time (s)", y = "Frequency")
```

```{r}
# compare average lap time for each constructor and plot it, 
# change the y scale to be narrower (between 92 and 95 seconds) 

miami2023_data |> 
  group_by(constructorName) |> 
  summarise(avgLapTime = mean(lapTime)) |> 
  mutate(constructorName = fct_reorder(.f = constructorName, .x = avgLapTime)) |>
  mutate(constructorName = fct_rev(constructorName)) |>
  ggplot(aes(x = constructorName, y = avgLapTime)) + 
  geom_col() + 
  labs(title = "Average Lap Time by Constructor",
       x = "Constructor", 
       y = "Average Lap Time (s)") + 
  coord_cartesian(ylim = c(92, 95)) + 
  theme_minimal()

```

```{r}
# histogram of average lap time by driver
miami2023_data |> 
  group_by(driverName) |> 
  summarise(avgLapTime = mean(lapTime)) |> 
  ggplot(aes(x = avgLapTime)) + 
  geom_histogram(binwidth = 1, fill = "blue", color = "black") + 
  labs(title = "Average Lap Time by Driver", x = "Average Lap Time (s)", y = "Frequency")
```

```{r}
max_lap_times <- miami2023_data |> filter(driverName == "Max Verstappen") |> pull(lapTime)
lando_lap_times <- miami2023_data |> filter(driverName == "Lando Norris") |> pull(lapTime)

# two sample t test between max vestappen lap times and lando norris lap times
t.test(max_lap_times, lando_lap_times, alternative = "greater")
```

```{r}
library(ggbreak) 

# side by side box plots all drivers
miami2023_data |> mutate(driverName = as.factor(driverName)) |> group_by(driverName) |>
                        mutate(driverNameOrd = fct_reorder(.f = driverName, .x = lapTime, .fun = max)) |>
  ggplot(aes(x = driverNameOrd, y = lapTime)) + 
  geom_boxplot() + 
  scale_y_break(c(112, 130)) +
  coord_flip() +
  labs(title = "Lap Times by Driver", x = "Driver", y = "Lap Time (s)")
```

```{r}
miami2023_data |> filter(driverName == "Logan Sargeant") 

```

```{r}
  
```



