---
title: "Ultimate Worksheet Answers"
format: html
---

Ultimate, also known as Ultimate Frisbee is a sport played with 2 teams of 7 players where players pass a Frisbee to each other and try to score in the opposing team's end zone. Each point starts with a pull where the defensive team throws the disc from their end zone towards the offensive team's end zone. The offensive team starts the point with possession and tries to score without dropping the Frisbee. If they drop the Frisbee, the defensive team can pick it up and try to score. The point ends when either team scores and the team that scored becomes the defensive team and pulls to the other team to start the next point. Games are played to 15 points, or to a time cutoff where the new target score is 1 point above the leading team.

The College Ultimate Championships consist of 2 weekends of competition, one for Division 3 and one for Division 1. 16 teams competed to be Division 3 Champion in both the men's and women's divisions, while 20 teams compete for the two Division 1 titles. Statistics were measured from each game at both events and 

## Import Packages

```{r}
## install.packages("tidyverse")
## install.packages("readr")
library(tidyverse)
library(readr)
```

## Data Import

Load in both tables with data from the 2024 College Ultimate Championships.
```{r}
ultimate_statistics <- read.csv("/Users/Gavin Cassidy/Desktop/GitHub/stat_289_score2/gacass21/Ultimate/data_repo/ultimate_total.csv")
ultimate_games <- read.csv("/Users/Gavin Cassidy/Desktop/GitHub/stat_289_score2/gacass21/Ultimate/data_repo/ultimate_per_game.csv")
```


## Tidy and Clean Data

Starting with the ultimate_statistics table, make the table in a tidy format using the pivot_wider() function.

```{r}
ultimate_statistics <- ultimate_statistics |> pivot_wider(names_from = Measure.Names, values_from = Measure.Values)
```

After Using pivot_wider to make each row contain the statistics from 1 player, use pivot wider on ultimate_games as well.

```{r}
ultimate_games <- ultimate_games |> pivot_wider(names_from = Measure.Names, values_from = Measure.Values)
```

Then use a join to combine the 2 tables by Player.

```{r}
ultimate_data <- left_join(ultimate_statistics, ultimate_games, by = join_by(Player))
```

Are there any repeated columns, if so use select to remove these columns.

```{r}
ultimate_data <- ultimate_data |> select(Player, 
                                         Competition.Level.x, 
                                         Full.Division.Name.x, 
                                         Full.Team.Name.x, 
                                         Gender.Division.x, 
                                         Turns, 
                                         Ds, 
                                         Assists, 
                                         Points, 
                                         `Plus Minus`, 
                                         `Team Games`)
```

Are columns named appropriately? Use a rename function to rename columns.

```{r}
ultimate_data <- ultimate_data |> rename(competition_level = Competition.Level.x, 
                        full_division_name = Full.Division.Name.x, 
                        full_team_name = Full.Team.Name.x,
                        gender_division = Gender.Division.x,
                        plus_minus = `Plus Minus`,
                        team_games = `Team Games`)
## Could also rename other variables to be lowercase
```

Use a summary function to check if the type of each column is appropriate for the data, if not change the type.

```{r}
ultimate_data |> summary()
## Data should be in an appropriate form
```


Now that the current data is in a tidy form, create new variables that have statistics in a per_game format using a mutate function and the team games column.

```{r}
ultimate_full <- ultimate_data |> mutate(turns_per_game = Turns/team_games, 
                                         ds_per_game = Ds/team_games,
                                         ast_per_game = Assists/team_games,
                                         pts_per_game = Points/team_games,
                                         pls_mns_per_game = plus_minus/team_games)
```

## Data Visualization

1. The data set has 1,665 total players that participated in the College Ultimate Championships, figure out how many actually contributed in a statistical category using a filter function.

```{r}
ultimate_full |> filter(Points > 0 | Assists > 0 | Turns > 0 | Ds > 0 | plus_minus != 0) |> 
  summarise(total_player = n())

## 1455 players had at least 1 Point, Assist, Turn, D, or plus_minus
```


2. Using dplyr functions, make a table that finds the top 15 players in assist totals from any division. Only include, player name, assists, and assists per game in your final table.

```{r}
ultimate_full |> arrange(desc(Assists)) |> slice(1:15) |> select(Player, Assists, ast_per_game)
```

3. Which player had the most points and assists combined in each division?

```{r}
ultimate_full |> mutate(pts_contributed = Points + Assists) |> group_by(full_division_name) |> arrange(desc(pts_contributed)) |> select(Player, Points, Assists, pts_contributed) |> slice(1)

## Leo Gordon, Jolie Krebs, Jacob Felton, Julianna Galian
```


4. Make a plot comparing division and assists and comment on any trends that are visible

```{r}
ggplot(data = ultimate_full, aes(y = Assists, x = full_division_name)) +
  geom_jitter(aes(color = full_division_name))


ggplot(data = ultimate_full, aes(y = Assists, x = full_division_name)) +
  geom_boxplot(aes(color = full_division_name))

ggplot(data = ultimate_full, aes(y = Assists, x = full_division_name)) +
  geom_violin(aes(color = full_division_name))


## Could do boxplot or strip plot, violin plot would also work but doesn't display the data very well
## All divisions are pretty similar when it comes to how assists are distibuted
```


5. 

a. Make a plot that compares turns per game and Assists, label the players in the top 10 for assists using geom_text().

```{r}
top_10_assists <- ultimate_full |> arrange(desc(Assists)) |> slice(1:10)


ggplot(data = ultimate_full, aes(x = Assists, y = turns_per_game)) +
  geom_point(color = "skyblue4") +
  geom_text(data = top_10_assists, aes(label = Player))

## Could also color = full_division_name

ggplot(data = ultimate_full, aes(x = Assists, y = turns_per_game)) +
  geom_point(aes(color = full_division_name)) +
  geom_text(data = top_10_assists, aes(label = Player))
```


b. Based on this plot, should any of the players in the top 10 for assists throw the disc less because of their turnover frequency?

Claire Lee, Jolie Krebs, and Juliana Galian all have more Turns than assists, so perhaps they should throw the disc less. 



6. 

a. Make a plot comparing Turns and Division. Are there any differences between the divisions?

```{r}
ggplot(data = ultimate_full, aes(x = full_division_name, y = Turns)) +
  geom_boxplot(aes(color = full_division_name)) +
  geom_text(data = top_10_assists, aes(label = Player))
```

b. Add in the players that are top 10 in assists. What does a high assist total indicate about your turnover rate?

Players with a high assist count all tend to be outliers in the Turnover category. They likely are handlers who throw the disc significantly more than most other players.


7. Plot Turns vs. plus_minus and use full_division_name as the color aesthetic, describe the relationship between Turns and plus_minus.

```{r}
ggplot(data = ultimate_full, aes(x = plus_minus, y = Turns)) +
  geom_point(aes(color = full_division_name))

## This is a moderate negative linear relationship. Not a very strong relationship, but there is definitely a correlation between large amounts of turnovers and a lower plus/minus.
```


8. 

a. Make a bar plot with the top 15 point scorers in order using reorder if necessary. Group by full division name and note if any players are in the same division.

```{r}
top_15_points <- ultimate_full |> arrange(desc(Points)) |> slice(1:15) |> mutate(Player = reorder(Player, Points))

ggplot(data = top_15_points, aes(y = Player, x = Points)) +
  geom_col(aes(fill = full_division_name))
```

b. Make the same bar plot with the top 15 players in Ds and compare the distribution of divisions.

```{r}
top_15_ds <- ultimate_full |> arrange(desc(Ds)) |> slice(1:15) |> mutate(Player = reorder(Player, Ds))

ggplot(data = top_15_ds, aes(y = Player, x = Ds)) +
  geom_col(aes(fill = full_division_name))


## Points is fairly balanced, with every division included while Ds only has the women's divisions, with D3 taking 11 of the top 15 spots.
```


9. 

a. Make a table with the sum of plus_minus for each division. 
```{r}
ultimate_full |> group_by(full_division_name) |> summarise(tot_plus_minus = sum(plus_minus))
```


b. When a team on defense scores a point, the players on the field on the offensive team lose a plus minus point. With the information that plus minus is only counted for offensive possessions where teams start with the Frisbee and are more likely to score, what do the total plus minus numbers say about the dominance of offense in each division?

In Division 1 Men, the offense is very dominant and scores much more often than the defense. Division 1 Women and Division 3 Men are similar where the offense is still very efficient and score much more than the defense. In Division 3 Women, the defense has a slight edge in plus_minus, meaning that teams on offense scores on slightly less than half of all points in this division. We can see this in both the Ds statistics and the Turns statistic, where Division 3 Women have the lead in both categories. This makes for very back and forth games when two teams are defensively strong and slightly weaker at offense.










